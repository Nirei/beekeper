# frozen_string_literal: true

module Beekeeper
  # Utility module for common text formatting tasks related to outputting Ruby code.
  module Formatter
    # Transform a camel case string to its `snake_case` version
    def self.snake_case(string)
      string
        .gsub(/::/, '/')
        .gsub(/([A-Z]+)([A-Z][a-z])/, '\1_\2')
        .gsub(/([a-z\d])([A-Z])/, '\1_\2')
        .tr('-', '_')
        .downcase
    end

    # Capitalize the first character of a string
    def self.capitalize_first(string)
      string[0] = string[0].capitalize
      string
    end

    # Transform an snake case string to its `CapitalizedCamelCase` version
    def self.camel_case(string)
      string
        .split('_')
        .map { |e| capitalize_first e }
        .join
    end

    # Format a string as an inline model name (camel case plus the word `Inline` appended at the end)
    def self.inline_model(string)
      "#{camel_case string}Inline"
    end

    # Indents an array of lines (strings) to the desired `depth` using two spaces for each level
    def self.indent(line_array, depth = 1)
      line_array.map { |line| "#{'  ' * depth}#{line}" }
    end

    # Returns the file header for Ruby code files with the appropriate data embedded
    def self.file_header(title, version, date)
      [
        '# This is an autogenerated file.',
        "# api title: #{title}, api version: #{version}, generation date: #{date}"
      ]
    end

    # Returns the given text as a comment
    def self.comment(text)
      "# #{text}"
    end
  end
end
