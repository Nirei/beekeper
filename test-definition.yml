openapi: 3.0.0
info:
  title: Game-Affinity
  version: '1.0'
  description: A social network to rate and share your thoughts on videogames and find like-minded gamers
  contact: {}
servers:
  - url: 'http://localhost:3000'
    description: Localhost
paths:
  /game:
    get:
      summary: List games
      tags:
        - browse
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  metadata:
                    $ref: '#/components/schemas/PageMetadata'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/GameData'
                required:
                  - metadata
                  - data
        '400':
          description: Bad Request
        '500':
          description: Internal Server Error
      operationId: list-games
      description: Fetch a list of available games that match some keywords
      parameters:
        - schema:
            type: string
          in: query
          name: search
          description: Keywords for the search
        - schema:
            type: string
          in: query
          name: sort
          description: Field to use to sort the search results
  '/game/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: Unique ID of the browsed game
    get:
      summary: Get game
      tags:
        - browse
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GameDetail'
        '400':
          description: Bad Request
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      operationId: get-game-by-id
      description: Get detailed information about a game given its ID
  /profile:
    get:
      summary: Get current user's public profile
      tags:
        - social
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPublic'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
      operationId: get-profile
      description: Get the public profile of the currently logged-in user.
    put:
      summary: Update current user's public profile
      operationId: put-profile
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPublic'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
      description: Modify the profile of the currently logged-in user.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPublic'
      tags:
        - social
  /profile/friend:
    get:
      summary: List friends
      tags:
        - social
      responses:
        '200':
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: object
                properties:
                  metadata:
                    $ref: '#/components/schemas/PageMetadata'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserPublic'
                required:
                  - metadata
                  - data
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
      operationId: list-friends
      description: List all friends of the logged-in user. This is an authenticated endpoint.
    post:
      summary: ''
      operationId: add-friend
      responses:
        '201':
          description: Created
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserId'
        description: ''
      description: Add a friend to the logged-in user's friend list. This is an authenticated endpoint.
      tags:
        - social
    parameters: []
  '/profile/friend/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    delete:
      summary: Delete friend
      operationId: delete-friend-by-id
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      description: Add a friend to the logged-in user's friend list. This is an authenticated endpoint.
      tags:
        - social
  /user:
    get:
      summary: List users
      tags:
        - social
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  metadata:
                    $ref: '#/components/schemas/PageMetadata'
                  data:
                    $ref: '#/components/schemas/UserPublic'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
      operationId: list-users
      description: Search a list of users matching some keywords.
      parameters:
        - schema:
            type: string
          in: query
          name: search
          description: Keywords for the search
        - schema:
            type: string
          in: query
          name: sort
          description: Field to use to sort the search results
  '/user/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    get:
      summary: Get user
      tags:
        - social
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPublic'
        '400':
          description: Bad Request
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      operationId: get-user-by-id
      description: Obtain an user's publicly available information. This is a public endpoint.
  '/user/{id}/friend':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    get:
      summary: List user's friends
      tags:
        - social
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  metadata:
                    $ref: '#/components/schemas/PageMetadata'
                  data:
                    $ref: '#/components/schemas/UserPublic'
        '400':
          description: Bad Request
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      operationId: get-user-friends-by-id
      description: List an user's friends.
  /account:
    get:
      summary: Get account information
      tags:
        - auth
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
      operationId: get-account
      description: Get user's private account information
    put:
      summary: Update account
      operationId: post-account
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
      description: 'Update account details. If the email is changed using this endpoint, the account''s validationStatus will change to UNCONFIRMED and a confirmation email will be send to the user.'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Account'
      tags:
        - auth
  /account/password:
    put:
      summary: Modify password
      operationId: put-account-password
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                  format: password
                  minLength: 8
                  description: User's new password text
                  writeOnly: true
              required:
                - password
      tags:
        - auth
      description: Update the current logged-in user's password.
components:
  schemas:
    PageMetadata:
      title: PageMetadata
      type: object
      description: Generic metadata for paged requests
      properties:
        count:
          type: integer
          description: Number of received elements
        total:
          type: integer
          description: Total number of available elements
        start:
          type: integer
          description: Number of the first element of this page
        finish:
          type: integer
          description: Number of the last element of this page
        previous:
          type: string
          format: uri
          description: Link to the previous page
        next:
          type: string
          format: uri
          description: Link to the next page
      required:
        - count
        - total
    GameData:
      title: GameData
      type: object
      description: Basic data about a game.
      properties:
        id:
          type: string
          description: Unique ID of this game
        title:
          type: string
          minLength: 1
          description: Title of this game
        summary:
          type: string
          minLength: 1
          description: Summary of this game
        developer:
          type: object
          description: Company responsible for the development of this game
          required:
            - id
            - name
          properties:
            id:
              type: string
              description: Unique ID of the developer
            name:
              type: string
              description: Name of the developer
        publisher:
          type: object
          description: Company responsible for the distribution of this game
          required:
            - id
            - name
          properties:
            id:
              type: string
              description: Unique ID of the publisher
            name:
              type: string
              description: Name of the publisher
        rating:
          type: object
          description: Rating data for this game
          required:
            - voters
          properties:
            value:
              type: number
              minimum: 1
              maximum: 10
              description: Numerical score for this game
            voters:
              type: integer
              minimum: 0
              description: Number of people who have given their opinion for this game
        releaseDate:
          type: object
          description: 'Date of the game release, can be partial'
          properties:
            year:
              type: string
              description: Year of release
            month:
              type: string
              description: Month of release
            day:
              type: string
              description: Day of release
          required:
            - year
        cover:
          type: string
          format: uri
        genres:
          type: array
          items:
            type: string
        platforms:
          type: array
          items:
            type: string
      required:
        - id
        - title
        - summary
        - developer
        - publisher
        - rating
        - cover
        - genres
        - platforms
    GameDetail:
      title: GameDetail
      type: object
      properties:
        data:
          $ref: '#/components/schemas/GameData'
        description:
          type: string
      required:
        - data
        - description
    UserPublic:
      title: UserPublic
      type: object
      description: Public information about an user
      properties:
        id:
          type: string
          description: User's ID
          readOnly: true
        name:
          type: string
          description: User's name
        avatar:
          type: string
          description: Profile picture of the user
          format: uri
        bio:
          type: string
          description: User's bio
        location:
          type: string
          description: User's location
        age:
          type: string
          description: Age of the user
        friends:
          type: integer
          description: Number of friends of this user
        ratings:
          type: integer
          description: Number of games the user has rated
        registered:
          type: string
          description: Date at which this user registered their account
          format: date
          readOnly: true
      required:
        - id
        - name
        - avatar
        - bio
        - friends
        - ratings
        - registered
    UserId:
      title: UserId
      type: object
      properties:
        id:
          type: string
          description: ID of an user
      description: Represents only a user ID
    Account:
      title: Account
      type: object
      description: 'User''s account private information, including linked services'
      properties:
        id:
          type: string
          description: 'Account ID, same as user ID'
          readOnly: true
        validationStatus:
          type: string
          description: 'Represents the account''s email validation status, can be CONFIRMED or UNCONFIRMED.'
          enum:
            - UNCONFIRMED
            - CONFIRMED
          readOnly: true
        email:
          type: string
          format: email
          description: Email of this user
      required:
        - id
        - validationStatus
        - email
    Test:
      title: ArrayTest
      type: array
      description: 'An array of objects to test nesting'
      items:
        type: object
        properties:
          id:
            type: string
tags:
  - name: affinity
  - name: auth
  - name: browse
  - name: rating
  - name: social
